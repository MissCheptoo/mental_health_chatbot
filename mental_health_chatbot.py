# -*- coding: utf-8 -*-
"""mental_health_chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AeumLT9pGEYT4ut2vxL6FLXLOlvMGLdK
"""

import nltk
import streamlit as st
import speech_recognition as sr
from nltk.chat.util import Chat, reflections

# Download necessary NLTK data (only needed once)
# nltk.download('punkt', quiet=True)

# Define conversation pairs (more detailed and interactive)
pairs = [
    (r"(.*)sad(.*)|(.*)depressed(.*)", [
        "I'm sorry you're feeling that way. Would you like to talk more about it?",
        "That sounds tough. I'm here to listen. Have you been feeling this way for a while?"
    ]),
    (r"(.*)anxious(.*)|(.*)nervous(.*)", [
        "Anxiety can be difficult. Would you like to try a simple breathing exercise?",
        "I'm here for you. Would you like some techniques to manage the anxiety?"
    ]),
    (r"(.*)stress(.*)", [
        "Stress can build up quickly. Want a quick tip to reset your mind?",
        "Try taking a 5-minute break, a walk, or journaling. Which one sounds helpful?"
    ]),
    (r"(.*)yes(.*)", [
        "Great! Here's something you can try: Breathe in for 4 seconds, hold for 7, and exhale for 8. Do this for 2 minutes.",
        "That's a good start. Also consider writing down your thoughts‚Äîit can help release tension."
    ]),
    (r"(.*)no(.*)", [
        "That's okay. Just know I'm here if you change your mind.",
        "Got it. Let‚Äôs just talk if that feels better for now."
    ]),
    (r"hi|hello", ["Hi there! How are you feeling today?"]),
    (r"(.*)help(.*)", [
        "You‚Äôre not alone. Please consider reaching out to a licensed professional or helpline.",
        "I can suggest coping strategies, but talking to a professional is always a good step."
    ]),
    (r"quit", ["Take care. Remember, you're not alone."]),
    (r"(.*)", ["I'm here to listen. Can you tell me more about how you're feeling?"])
]

# Initialize the chatbot
chatbot = Chat(pairs, reflections)

# Speech recognition
def transcribe_speech():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        st.info("Listening... Please speak now.")
        try:
            audio = recognizer.listen(source, timeout=5)
            text = recognizer.recognize_google(audio)
            return text
        except sr.UnknownValueError:
            return "Sorry, I couldn't understand your speech."
        except sr.RequestError:
            return "There was an issue with the speech recognition service."
        except Exception as e:
            return f"An error occurred: {e}"

# Streamlit app
def main():
    st.title("üß† Mental Health Support Chatbot")
    st.write("Hi, I'm here to support you. You can type or speak about how you're feeling.")

    st.warning("‚ö†Ô∏è This chatbot is not a substitute for professional mental health care. If you're in crisis, please contact a licensed therapist or helpline.")

    # Initialize session state
    if 'history' not in st.session_state:
        st.session_state.history = []

    input_mode = st.radio("Choose input method:", ["Type", "Speak"])

    if input_mode == "Type":
        user_input = st.text_input("How are you feeling today?", key="text_input")
        if user_input:
            response = chatbot.respond(user_input)
            st.session_state.history.append(("You", user_input))
            st.session_state.history.append(("Chatbot", response))

    elif input_mode == "Speak":
        if st.button("Speak Now"):
            user_input = transcribe_speech()
            st.session_state.history.append(("You", user_input))
            response = chatbot.respond(user_input)
            st.session_state.history.append(("Chatbot", response))

    # Display conversation history
    st.subheader("Conversation")
    for speaker, message in st.session_state.history:
        st.markdown(f"**{speaker}:** {message}")

if __name__ == "__main__":
    main()