# -*- coding: utf-8 -*-
"""mental_health_chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AeumLT9pGEYT4ut2vxL6FLXLOlvMGLdK
"""

import streamlit as st
import speech_recognition as sr
from nltk.chat.util import Chat, reflections

# Define chatbot logic
pairs = [
    (r".*sad|depressed|unhappy|down.*", [
        "I'm sorry you're feeling this way. You're not alone. Talking to a friend or counselor can help.",
        "It might help to take a walk, listen to calming music, or write down your thoughts."
    ]),
    (r".*anxious|anxiety|nervous|worried.*", [
        "Take a few deep breaths. You're doing your best.",
        "Try grounding exercises: look around and name 5 things you can see."
    ]),
    (r".*stressed|overwhelmed|tired.*", [
        "Stress can be tough. Remember to take breaks and prioritize rest.",
        "You might want to try a short breathing exercise or drink some water."
    ]),
    (r".*help.*", [
        "I'm here to support you. While I can't provide medical advice, I can suggest ways to cope.",
        "Please consider reaching out to a professional if you're struggling."
    ]),
    (r"hi|hello", ["Hi there. I'm here to support you. How are you feeling today?"]),
    (r"quit", ["Take care. Remember, you're not alone."]),
    (r"(.*)", [
        "I'm here to listen. Can you tell me more about how you're feeling?",
        "That sounds important. I'm listening."
    ])
]

chatbot = Chat(pairs, reflections)

# Transcribe speech
def transcribe_speech():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        st.info("Listening...")
        try:
            audio = recognizer.listen(source, timeout=5)
            text = recognizer.recognize_google(audio)
            return text
        except sr.UnknownValueError:
            return "Sorry, I couldn't understand what you said."
        except sr.RequestError:
            return "Speech recognition service is not available."
        except Exception as e:
            return f"Error: {e}"

# Streamlit app
def main():
    st.title("ðŸ§  Mental Health Support Chatbot (Basic)")
    st.write("This chatbot offers general support. It is **not a substitute for professional mental health services**.")
    st.markdown("If you're in crisis, please contact a mental health professional or helpline in your area.")

    input_mode = st.radio("Choose input method:", ["Text", "Speech"])

    if input_mode == "Text":
        user_input = st.text_input("How are you feeling today?")
        if user_input:
            response = chatbot.respond(user_input)
            st.write(f"Chatbot: {response}")

    elif input_mode == "Speech":
        if st.button("Start Listening"):
            user_input = transcribe_speech()
            st.write(f"You said: {user_input}")
            if user_input:
                response = chatbot.respond(user_input)
                st.write(f"Chatbot: {response}")

if __name__ == "__main__":
    main()